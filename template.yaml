AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Security alert enrichment!

Globals:
  Function:
    Timeout: 90

Resources:
  InvokeApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: squyre
      Auth:
        DefaultAuthorizer: AWS_IAM
      Tags:
        service: squyre

  ConductorFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Conductor'
      CodeUri: conductor
      Handler: conductor
      Runtime: provided.al2
      Role: !GetAtt ConductorRole.Arn
      Environment:
        Variables:
          STACK_NAME: !Sub '${AWS::StackName}'
          HOST_REGEX: A-[A-Z0-9]{6}
          IGNORE_DOMAIN: your-internal-domain.int
      Events:
        AlertEvent:
          Type: Api
          Properties:
            Path: /alert
            Method: post
            RestApiId:
              Ref: InvokeApi

  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-Alert'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt ConductorFunction.Arn

  ConductorInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ConductorFunction
      Principal: sns.amazonaws.com

  GreyNoiseFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-GreyNoise'
      CodeUri: function/greynoise
      Handler: greynoise
      Runtime: provided.al2
      Environment:
        Variables:
          ONLY_LOG_MATCHES: true

  AlienvaultOTXFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AlienvaultOTXFunction'
      CodeUri: function/alienvaultotx
      Handler: alienvaultotx
      Runtime: provided.al2
      Environment:
        Variables:
          ONLY_LOG_MATCHES: true

  IPAPIFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-IPapi'
      CodeUri: function/ipapi
      Handler: ipapi
      Runtime: provided.al2

  CrowdStrikeFalconFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CrowdStrikeFalcon'
      CodeUri: function/crowdstrikefalcon
      Handler: crowdstrikefalcon
      Runtime: provided.al2

  ExoneraTorFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ExoneraTor'
      CodeUri: function/exonerator
      Handler: exonerator
      Runtime: provided.al2

  OutputFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Output'
      CodeUri: output/jira
      Handler: jira
      Runtime: provided.al2
      Role: !GetAtt OutputRole.Arn
      Environment:
        Variables:
          PROJECT: SECURITY
          BASE_URL: https://test-squyre.atlassian.net

  EnrichStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${AWS::StackName}-Enrich'
      DefinitionUri: statemachine/enrich.asl.json
      DefinitionSubstitutions:
        GreyNoiseFunctionArn: !GetAtt GreyNoiseFunction.Arn
        AlienvaultOTXFunctionArn: !GetAtt AlienvaultOTXFunction.Arn
        IPAPIFunctionArn: !GetAtt IPAPIFunction.Arn
        OutputFunctionArn: !GetAtt OutputFunction.Arn
        CrowdStrikeFalconFunctionArn: !GetAtt CrowdStrikeFalconFunction.Arn
        ExoneraTorFunctionArn: !GetAtt ExoneraTorFunction.Arn

      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref AlienvaultOTXFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GreyNoiseFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CrowdStrikeFalconFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref IPAPIFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref OutputFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ExoneraTorFunction

  ConductorRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub '${AWS::StackName}-ConductorRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
        - 
          PolicyName: !Sub '${AWS::StackName}-ConductorPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${AWS::StackName}-*'
              - Effect: Allow
                Action:
                  - cloudformation:ListStackResources
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-*'

  OutputRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub '${AWS::StackName}-OutputRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
        - 
          PolicyName: !Sub '${AWS::StackName}-OutputPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:JiraApi-*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OpsGenieAPI-*'

Outputs:
  WebhookURL:
      Description: "Webhook API Gateway URL"
      Value: !Sub "https://${InvokeApi}.execute-api.${AWS::Region}.amazonaws.com/squyre/alert"
