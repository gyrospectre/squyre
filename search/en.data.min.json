[{"id":0,"href":"/squyre/functions/crowdstrike/","title":"CrowdStrike Falcon","parent":"Functions","content":" Summary Indicator context from the CrowdStrike Falcon threat intelligence database. Also provides information on corporate hosts running the Falcon agent.\nRequires a paid Falcon Insight and Falcon X license.\nSupports ipv4, domain, sha256, hostname\nExample Result Found Falcon X indicator for 127.0.0.1: Malicious confidence: \u0026#39;High\u0026#39;. Added: 2022-01-01 00:00:00 \u0026#43;0000 UTC Updated: 2022-01-01 00:00:10 \u0026#43;0000 UTC Labels: Killchain/C2,Malware/CobaltStrike Kill Chains: C2 Malware Families: CobaltStrike Vulnerabilities: Threat Types: Commodity,Criminal,RAT Targets: More information at: https://falcon.crowdstrike.com/search/?term=_all:~\u0026#39;127.0.0.1\u0026#39; Setup Create a Falcon API key In AWS, create a new Secrets Manager secret called CrowdstrikeAPI in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret. { \u0026#34;ClientID\u0026#34;: \u0026lt;the Client ID of the API key you just created\u0026gt;, \u0026#34;ClientSecret\u0026#34;: \u0026lt;the Client Secret of the key\u0026gt;, \u0026#34;FalconCloud\u0026#34;: \u0026lt;the Falcon Cloud region your account uses e.g. us-1, us-2, eu-1, us-gov-1\u0026gt; } Environment Variables ONLY_LOG_MATCHES : Set to true (in template.yaml) to only decorate an alert if the indicator was found in Falcon. Default=false.\n","description":" Summary Indicator context from the CrowdStrike Falcon threat intelligence database. Also provides information on corporate hosts running the Falcon agent.\nRequires a paid Falcon Insight and Falcon X license.\nSupports ipv4, domain, sha256, hostname\nExample Result Found Falcon X indicator for 127.0.0.1: Malicious confidence: \u0026#39;High\u0026#39;. Added: 2022-01-01 00:00:00 \u0026#43;0000 UTC Updated: 2022-01-01 00:00:10 \u0026#43;0000 UTC Labels: Killchain/C2,Malware/CobaltStrike Kill Chains: C2 Malware Families: CobaltStrike Vulnerabilities: Threat Types: Commodity,Criminal,RAT Targets: More information at: https://falcon.crowdstrike.com/search/?term=_all:~\u0026#39;127.0.0.1\u0026#39; Setup Create a Falcon API key In AWS, create a new Secrets Manager secret called CrowdstrikeAPI in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret. { \u0026#34;ClientID\u0026#34;: \u0026lt;the Client ID of the API key you just created\u0026gt;, \u0026#34;ClientSecret\u0026#34;: \u0026lt;the Client Secret of the key\u0026gt;, \u0026#34;FalconCloud\u0026#34;: \u0026lt;the Falcon Cloud region your account uses e.g. us-1, us-2, eu-1, us-gov-1\u0026gt; } Environment Variables ONLY_LOG_MATCHES : Set to true (in template.yaml) to only decorate an alert if the indicator was found in Falcon. Default=false.\n"},{"id":1,"href":"/squyre/functions/exonerator/","title":"ExoneraTor","parent":"Functions","content":" Summary ExoneraTor is a handy service from the Tor Project, which tells you if an IP was a Tor relay on a given date. For more information, check out https://metrics.torproject.org/exonerator.html. If an alert sourced from a Tor exit node (relay), this can be an interesting piece of information when triaging.\nNo API key is required.\nSupports ipv4\nExample Result ExoneraTor believes 127.0.0.1 was recently a Tor relay. More information at: https://metrics.torproject.org/exonerator.html?ip=127.0.0.1\u0026amp;timestamp=2022-06-12\u0026amp;lang=en Setup No setup required.\nEnvironment Variables ONLY_LOG_MATCHES : Set to true (in template.yaml) to only decorate an alert if the IP was found to be a recent Tor relay. Default=false.\n","description":" Summary ExoneraTor is a handy service from the Tor Project, which tells you if an IP was a Tor relay on a given date. For more information, check out https://metrics.torproject.org/exonerator.html. If an alert sourced from a Tor exit node (relay), this can be an interesting piece of information when triaging.\nNo API key is required.\n"},{"id":2,"href":"/squyre/functions/","title":"Functions","parent":"Squyre","content":"","description":""},{"id":3,"href":"/squyre/functions/list/","title":"Functions","parent":"Functions","content":" AlienVault OTX CrowdStrike Falcon ExoneraTor GreyNoise IP-API.com ","description":" AlienVault OTX CrowdStrike Falcon ExoneraTor GreyNoise IP-API.com "},{"id":4,"href":"/squyre/architecture/errors/","title":"A Note On Error Handling","parent":"Architecture","content":"Because of the way Squyre is used, we\u0026rsquo;re looking for short and sharp lookups for which failures are not the end of the world.\nFor example; if an alert fires for suspicious activity and we\u0026rsquo;re not able to get additional information from Greynoise, this doesn\u0026rsquo;t stop the analyst from getting on with things, it\u0026rsquo;s just that some manual work might be needed to do what Squyre would otherwise had done!\nUltimately, the main priority is the alert, and enrichments are a bonus.\nFor this reason, the enrichment functions will swallow errors experienced when calling different services, reporting the error in a Result object that is passed back into the alert/ticket. This Result has the Success attribute set to False to indicate this.\nIt\u0026rsquo;s important to note that this means that enrichment lambdas will rarely fail (so neither will step function executions), but errors will be reported like all other enrichments - in alert tickets. This is intended to ensure that we get maximum benefit from each Squyre run, errors cause the least amount of impact on the real job of alert triage, but that errors are still made visible to the analyst so they know what manual rework they might need to do.\n","description":"Because of the way Squyre is used, we\u0026rsquo;re looking for short and sharp lookups for which failures are not the end of the world.\nFor example; if an alert fires for suspicious activity and we\u0026rsquo;re not able to get additional information from Greynoise, this doesn\u0026rsquo;t stop the analyst from getting on with things, it\u0026rsquo;s just that some manual work might be needed to do what Squyre would otherwise had done!\n"},{"id":5,"href":"/squyre/architecture/","title":"Architecture","parent":"Squyre","content":"","description":""},{"id":6,"href":"/squyre/architecture/architecture/","title":"Architecture","parent":"Architecture","content":"Squyre is serverless, and uses AWS services SNS, API Gateway, Lambda and Step Functions to do it\u0026rsquo;s thing.\nAlerts are sent in via SNS or Webhook, which triggers the first Lambda function, conductor. This function takes the alert body, extracts IP addresses, domain names, URLs and hostnames, and then starts the step function with this information. Note that any Microsoft 365 ATP Safe Links are also converted into their original URLs at this stage.\nThe step function (or state machine) then invokes enrichment functions depending on what sort of info was in the alert. There are currently two categories of functions:\nMultipurpose. These functions can enrich based on various data types, so are run on every alert. IPv4. These functions can only enrich IP addresses, so only run if the alert contained at least one IP. Enrichment functions run in parallel, and then once everything is done the output is passed on to the final Lambda, output. This function is responsible for adding the results to the chosen destination (either Jira or Opsgenie) as comments.\nAll of this is deployed via Cloudformation, to make it easy to spin up and down.\n","description":"Squyre is serverless, and uses AWS services SNS, API Gateway, Lambda and Step Functions to do it\u0026rsquo;s thing.\nAlerts are sent in via SNS or Webhook, which triggers the first Lambda function, conductor. This function takes the alert body, extracts IP addresses, domain names, URLs and hostnames, and then starts the step function with this information. Note that any Microsoft 365 ATP Safe Links are also converted into their original URLs at this stage.\n"},{"id":7,"href":"/squyre/usage/customise/","title":"Customising for your environment","parent":"Usage","content":"There are a couple of features which can be customised for your environment.\nEnrichment Functions You can modify statemachine/enrich.asl.json to change which enrichment functions run. The easiest way to do this is to use the included helper script, which provides a nice wizard to select functions.\nmake setup Then run the deploy again to save your changes to AWS.\nDon\u0026rsquo;t have CrowdStrike? No problem, just remove that function! If you want, you can also remove unnecessary functions from template.yaml to cut down what gets deployed to AWS. If you save the new definition to a filename other than statemachine/enrich.asl.json, then don\u0026rsquo;t forget to update template.yaml accordingly.\nIf you\u0026rsquo;re \\m/ hardcore \\m/, you can also edit the state machine definition from the AWS Step Functions Workflow Studio in the AWS Console, then export as JSON back into statemachine/enrich.asl.json.\nHostname Enrichment Squyre will attempt to extract any internal hostnames from your alerts. Most organisations have a convention for endpoints and servers, but they vary considerably. As a result, you need to tell Squyre what your org\u0026rsquo;s convention is.\nDo this via an environment variable in template.yaml under the ConductorFunction section, specifying a Go compatible regular expression.\nHOST_REGEX: A-[A-Z0-9]{6} The above example will match hostnames such as A-AB12CD.\nFiltering out internal domains In most cases, you don\u0026rsquo;t want to enrich your internal domain names or email addresses, you\u0026rsquo;re only concerned with domains unrelated to your organisation. Again, via an environment variable in template.yaml in the ConductorFunction section, you can tell Squyre to ignore your domain.\nIGNORE_DOMAIN: your-internal-domain.int ","description":"There are a couple of features which can be customised for your environment.\nEnrichment Functions You can modify statemachine/enrich.asl.json to change which enrichment functions run. The easiest way to do this is to use the included helper script, which provides a nice wizard to select functions.\nmake setup Then run the deploy again to save your changes to AWS.\n"},{"id":8,"href":"/squyre/usage/getting_started/","title":"Getting started","parent":"Usage","content":" There are a couple of ways you can deploy, either directly between your alert source and ticketing system (pattern 1), or using an incident management platform like Opsgenie (pattern 2).\nPattern 1 is the out of the box configuration as it\u0026rsquo;s the most generic. If you don\u0026rsquo;t already have something in place to create tickets automatically when alerts fire, then this is for you. We currently support Splunk and Sumo Logic for alert sources. Jira is the only supported ticket management system right now.\nPattern 2 however, is more scalable. Using an incident management platform allows you to add as many alert sources as you like, without having to change anything on the Squyre side. We only support Ogsgenie today, with PagerDuty likely to come next.\nEither way, you start the same way to deploy Squyre to AWS! It\u0026rsquo;s pretty easy.\nClone the repo. git clone https://github.com/gyrospectre/squyre.git Install the AWS SAM CLI.\nRun the setup wizard. You\u0026rsquo;ll be asked to specify your alert source and output platforms, and which enrichment functions to use. Hint: Choose only functions that don\u0026rsquo;t require API keys to get started quicker in your just want to play around!\nmake setup Note: If you choose Jira for your output platform, you\u0026rsquo;ll need to enter the Project name to create tickets in, and the base URL of your Jira Cloud instance. In AWS, create an IAM user to use for deployment. Whilst you can definitely cut down things further, a user with the IAMFullAccess and PowerUserAccess managed policies will work fine. You don\u0026rsquo;t need console access here, just choose Access key - Programmatic access.\nPop the credentials of this new deployment user into your shell. See this guide if you need help.\nBuild and deploy the stack. Just use the defaults when prompted, to deploy a stack named squyre.\nmake build make deploy-guided Depending on what options you chose in step 3, see the child pages of the Functions and Getting Started sections of this documentation for specific setup requirements for each. ","description":" There are a couple of ways you can deploy, either directly between your alert source and ticketing system (pattern 1), or using an incident management platform like Opsgenie (pattern 2).\nPattern 1 is the out of the box configuration as it\u0026rsquo;s the most generic. If you don\u0026rsquo;t already have something in place to create tickets automatically when alerts fire, then this is for you. We currently support Splunk and Sumo Logic for alert sources. Jira is the only supported ticket management system right now.\n"},{"id":9,"href":"/squyre/usage/jira/","title":"Getting Started: Jira Setup","parent":"Usage","content":" Create a Jira API key.\nIn AWS, create a new Secrets Manager secret called JiraApi in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret.\n{ \u0026#34;apikey\u0026#34;: \u0026lt;the API key you just created\u0026gt;, \u0026#34;user\u0026#34;: \u0026lt;the email address of the Jira account the key is associated with\u0026gt; } ","description":" Create a Jira API key.\nIn AWS, create a new Secrets Manager secret called JiraApi in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret.\n{ \u0026#34;apikey\u0026#34;: \u0026lt;the API key you just created\u0026gt;, \u0026#34;user\u0026#34;: \u0026lt;the email address of the Jira account the key is associated with\u0026gt; }"},{"id":10,"href":"/squyre/usage/opsgenie/","title":"Getting Started: OpsGenie Setup","parent":"Usage","content":" Create an OpsGenie integration API key.\nIn AWS, create a new Secrets Manager secret called OpsGenieAPI in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret.\n{ \u0026#34;apikey\u0026#34;: \u0026lt;the API key you just created\u0026gt; } Setup OpsGenie to send SNS messages to topic squyre-Alert on alert creation only. ","description":" Create an OpsGenie integration API key.\nIn AWS, create a new Secrets Manager secret called OpsGenieAPI in the same account/region as Squyre is deployed. Use the following content, obviously substituting your key and email. The secret should be of type Other type of secret.\n{ \u0026#34;apikey\u0026#34;: \u0026lt;the API key you just created\u0026gt; } Setup OpsGenie to send SNS messages to topic squyre-Alert on alert creation only. "},{"id":11,"href":"/squyre/usage/splunk/","title":"Getting Started: Splunk Setup","parent":"Usage","content":" On Splunk, install the Splunk Add-on for AWS, which adds the ability to send alerts to SNS.\nConfigure the app with some AWS credentials. The IAM user or role must have SNS Publish/Get/List perms to SNS topic squyre-Alert.\nUpdate one of your Splunk saved searches, adding a strcat at the end to combine all the fields you think are of use to a new field called interesting.\n\u0026lt;awesome detection logic\u0026gt; | stats values(src_ip) as src_ip by dest_user | eval Detection=\u0026quot;A test alert\u0026quot; | strcat src_ip \u0026quot;,\u0026quot; dest_user interesting\nAdd an AWS SNS Alert action to your scheduled search, updating the Message field of the action to $result.interesting$.\nAlso fill out the Account and Region fields per the AWS Tech Add-on documentation. The topic should be set to squyre-Alert.\n","description":" On Splunk, install the Splunk Add-on for AWS, which adds the ability to send alerts to SNS.\nConfigure the app with some AWS credentials. The IAM user or role must have SNS Publish/Get/List perms to SNS topic squyre-Alert.\nUpdate one of your Splunk saved searches, adding a strcat at the end to combine all the fields you think are of use to a new field called interesting.\n\u0026lt;awesome detection logic\u0026gt; | stats values(src_ip) as src_ip by dest_user | eval Detection=\u0026quot;A test alert\u0026quot; | strcat src_ip \u0026quot;,\u0026quot; dest_user interesting\n"},{"id":12,"href":"/squyre/usage/sumologic/","title":"Getting Started: Sumo Logic Setup","parent":"Usage","content":" In Sumo, create a new Webhook connection under Manage Data \u0026gt; Monitoring \u0026gt; Connections. See the official guide here.\nUse the following spec for the Payload. This matches the definition in Squyre, so that we can parse all the details correctly.\n{ \u0026#34;event_type\u0026#34;: \u0026#34;trigger\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;{{Description}}\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;Sumo Logic\u0026#34;, \u0026#34;client_url\u0026#34;: \u0026#34;{{SearchQueryUrl}}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;{{Name}}\u0026#34;, \u0026#34;time_range\u0026#34;: \u0026#34;{{TimeRange}}\u0026#34;, \u0026#34;time_trigger\u0026#34;: \u0026#34;{{FireTime}}\u0026#34;, \u0026#34;num_results\u0026#34;: \u0026#34;{{NumQueryResults}}\u0026#34;, \u0026#34;results\u0026#34;: \u0026#34;{{ResultsJson}}\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;{{Id}}\u0026#34; } Create a new scheduled search, and configure it to send notifications to the webhook you configured above. ","description":" In Sumo, create a new Webhook connection under Manage Data \u0026gt; Monitoring \u0026gt; Connections. See the official guide here.\nUse the following spec for the Payload. This matches the definition in Squyre, so that we can parse all the details correctly.\n{ \u0026#34;event_type\u0026#34;: \u0026#34;trigger\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;{{Description}}\u0026#34;, \u0026#34;client\u0026#34;: \u0026#34;Sumo Logic\u0026#34;, \u0026#34;client_url\u0026#34;: \u0026#34;{{SearchQueryUrl}}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;{{Name}}\u0026#34;, \u0026#34;time_range\u0026#34;: \u0026#34;{{TimeRange}}\u0026#34;, \u0026#34;time_trigger\u0026#34;: \u0026#34;{{FireTime}}\u0026#34;, \u0026#34;num_results\u0026#34;: \u0026#34;{{NumQueryResults}}\u0026#34;, \u0026#34;results\u0026#34;: \u0026#34;{{ResultsJson}}\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;{{Id}}\u0026#34; } Create a new scheduled search, and configure it to send notifications to the webhook you configured above. "},{"id":13,"href":"/squyre/usage/requirements/","title":"Requirements","parent":"Usage","content":"You will need 3 things in place in order to use Squyre.\nYou must have an AWS account to host it. It runs solely in AWS using serverless services (lambdas and step functions). If you don\u0026rsquo;t have one, don\u0026rsquo;t be too concerned with signing up - if you\u0026rsquo;re only running a few test alerts through Squyre AWS \u0026ldquo;Free Tier\u0026rdquo; should mean the cost is negligible (if not completely free).\nYou need something that is generating security alerts for you. Well, obviously! Currently, we support Splunk or Opsgenie as alert sources, but we also have experimental support for Sumo Logic. If you don\u0026rsquo;t use any of these, but your platform supports sending alerts to AWS SNS or a Webhook, raise an issue and we can look at adding support - should be fairly easy!\nYou need something capturing the steps taken to investigate alerts, like a ticketing system. This is commonly a task management platform like Jira, ServiceNow etc. We support Jira or Opsgenie as output providers right now.\n","description":"You will need 3 things in place in order to use Squyre.\nYou must have an AWS account to host it. It runs solely in AWS using serverless services (lambdas and step functions). If you don\u0026rsquo;t have one, don\u0026rsquo;t be too concerned with signing up - if you\u0026rsquo;re only running a few test alerts through Squyre AWS \u0026ldquo;Free Tier\u0026rdquo; should mean the cost is negligible (if not completely free).\nYou need something that is generating security alerts for you. Well, obviously! Currently, we support Splunk or Opsgenie as alert sources, but we also have experimental support for Sumo Logic. If you don\u0026rsquo;t use any of these, but your platform supports sending alerts to AWS SNS or a Webhook, raise an issue and we can look at adding support - should be fairly easy!\n"},{"id":14,"href":"/squyre/architecture/state/","title":"State Machine","parent":"Architecture","content":"The main state machine is called EnrichStateMachine, because it, uh enriches, and it\u0026rsquo;s a state machine.\nIt is defined by statemachine/enrich.asl.json in the AWS ASL language.\nLayout is straightforward; nested parallel branches run the enrichment tasks which are sent to the output function at the end to update alerts/tickets.\n","description":"The main state machine is called EnrichStateMachine, because it, uh enriches, and it\u0026rsquo;s a state machine.\nIt is defined by statemachine/enrich.asl.json in the AWS ASL language.\nLayout is straightforward; nested parallel branches run the enrichment tasks which are sent to the output function at the end to update alerts/tickets.\n"},{"id":15,"href":"/squyre/usage/","title":"Usage","parent":"Squyre","content":"","description":""},{"id":16,"href":"/squyre/functions/alienvaultotx/","title":"Alienvault OTX","parent":"Functions","content":" Summary Indicator context from the Alienvault OTX threat intelligence community.\nNo API key is required for lookups.\nSupports ipv4, domain, url\nExample Result Alienvault OTX has 1 matches for \u0026#39;127.0.0.1\u0026#39;, in the following pulses: IPQS Abusive IP List More information at: https://otx.alienvault.com/browse/global/pulses?q=127.0.0.1 Setup No setup required.\nEnvironment Variables ONLY_LOG_MATCHES : Set to true (in template.yaml) to only decorate an alert if the indicator was found in Alienvault OTX. Default=false.\n","description":" Summary Indicator context from the Alienvault OTX threat intelligence community.\nNo API key is required for lookups.\nSupports ipv4, domain, url\nExample Result Alienvault OTX has 1 matches for \u0026#39;127.0.0.1\u0026#39;, in the following pulses: IPQS Abusive IP List More information at: https://otx.alienvault.com/browse/global/pulses?q=127.0.0.1 Setup No setup required.\n"},{"id":17,"href":"/squyre/functions/greynoise/","title":"Greynoise","parent":"Functions","content":" Summary Data on IP addresses associated with opportunistic internet scanning or common business services, not targeted threats. For more information, check out https://www.greynoise.io/.\nThis function uses the free community API, so no key is required.\nSupports ipv4\nExample Result Greynoise believes 127.0.0.1 is malicious. Noise? true In the RIOT database? false Last seen 2022-02-06. More information at: https://viz.greynoise.io/ip/127.0.0.1 Setup No setup required.\nEnvironment Variables ONLY_LOG_MATCHES : Set to true (in template.yaml) to only decorate an alert if the indicator was found in Greynoise. Default=false.\n","description":" Summary Data on IP addresses associated with opportunistic internet scanning or common business services, not targeted threats. For more information, check out https://www.greynoise.io/.\nThis function uses the free community API, so no key is required.\nSupports ipv4\nExample Result Greynoise believes 127.0.0.1 is malicious. Noise? true In the RIOT database? false Last seen 2022-02-06. More information at: https://viz.greynoise.io/ip/127.0.0.1 Setup No setup required.\n"},{"id":18,"href":"/squyre/functions/ipapi/","title":"IP API","parent":"Functions","content":" Summary Geolocation data on IP addresses from https://ip-api.com/. This service is free for non-commercial use, which is the only form currently supported by this function. If you find IP API useful and would like to use it in a commercial environment, I\u0026rsquo;d encourage you to subscribe.\nSupports ipv4\nExample Result IP API result for 127.0.0.1 (Dynamic distribution IPs for broadband services): Country: Russia City: Baltiysk, Kaliningrad Oblast ISP: Rostelecom networks Setup No setup required.\n","description":" Summary Geolocation data on IP addresses from https://ip-api.com/. This service is free for non-commercial use, which is the only form currently supported by this function. If you find IP API useful and would like to use it in a commercial environment, I\u0026rsquo;d encourage you to subscribe.\nSupports ipv4\n"},{"id":19,"href":"/squyre/contrib/","title":"Developing","parent":"Squyre","content":" Data Structures squyre.Alert - The main data structure used by Squyre. It encapsulates everything about an alert, it\u0026rsquo;s details and the enrichment results. Alerts are the standard way data is passed around between components.\nsquyre.Subject - Any collection of data points which can be used for enrichment. At the time of writing, either an IP address or a domain name. Subjects are stored within Alerts.\nsquyre.Result - Stores enrichment results, the subject used, and the source of the data. Results are also stored within Alerts.\nEnrichment Functions An enrichment function is a Go lambda that takes a squyre.Alert as input (see squyre.go), performs some analysis, adds the results (as a slice of squyre.Result objects) to the Alert object, and returns a Json string representation of the updated Alert.\nHave a look at any of the existing functions (in the function) folder, you should be able to copy paste a fair amount and get started pretty quick. If you need to work with API keys, please use AWS Secrets Manager to store your secrets; there is a built in function to fetch keys as required! For E.g. https://github.com/gyrospectre/squyre/blob/0ad801155f278d0e02894bd312eb4f0da2387341/output/jira/main.go#L49\nOnce you have something working, add the new function to the template.yaml (again copy one of the other stanzas) and then test:\nmake fmt make lint make test make build sam local invoke MyNewFunction --event event/alert.json If all is working, then add the new function to the statemachine/enrich.asl.json file, so that it executes as part of the main workflow. Then you can sam deploy and try it out!\nTesting Run Go unit tests\nmake test Integration tests (requires AWS credentials in session, live calls)\nmake build # Test enrichment functions sam local invoke IPAPIFunction --event event/ip-alert.json sam local invoke GreynoiseFunction --event event/ip-alert.json # Test Conductor from both potential sources of the SNS sam local invoke ConductorFunction --event event/sns_from_splunk.json sam local invoke ConductorFunction --event event/sns_from_opsgenie.json # Test whichever output function you\u0026#39;re using (either Jira or Opsgenie) sam local invoke OutputFunction --event event/output.json ","description":" Data Structures squyre.Alert - The main data structure used by Squyre. It encapsulates everything about an alert, it\u0026rsquo;s details and the enrichment results. Alerts are the standard way data is passed around between components.\nsquyre.Subject - Any collection of data points which can be used for enrichment. At the time of writing, either an IP address or a domain name. Subjects are stored within Alerts.\n"},{"id":20,"href":"/squyre/","title":"Squyre","parent":"","content":" Easy alert enrichment for overworked security teams!\nSquyre will help you deal with threats more effectively, decorating your security alerts by adding helpful information that provides context and helps you decide if this alert is cause for concern.\nThe Problem Once beyond the earliest stages of maturity, Security teams build processes to generate alerts to tell them when threats may be active in their environment. These alerts must be \u0026ldquo;triaged\u0026rdquo; by an analyst; as in, deciding which of the following applies.\n\u0026ldquo;false positive\u0026rdquo; the alert was triggered by an event that it was not designed to catch \u0026ldquo;true positive benign\u0026rdquo; the alert was triggered by the intended event, but the activity is acceptable and does not require further action. \u0026ldquo;true positive malicious\u0026rdquo; the alert was triggered by the intended event. It\u0026rsquo;s bad and we need to call an incident! The goal of threat detection is to be as accurate as possible with the last category, and minimise the other two. Unfortunately this is quite difficult! Enterprise environments are complex, and they have lots of humans doing complex stuff in them; you will always have some level of false positives/true positive benign alerts.\nUnfortunately, alerts of these undesirable types can be quite hard on the analyst! Alerts almost never contain all the information needed to be able to triage. An analyst will perform research on the host, IP address, file hash etc in the alert, trying to get context on what all of this information means and whether it means something bad has happened. This is time consuming and requires switching to numerous tools, websites etc to gather various parts of the puzzle.\nAt scale, this leads to \u0026ldquo;alert fatigue\u0026rdquo;: de-sensitising analysts with repetitive tasks, leading to missed or ignored alerts or delayed responses. It\u0026rsquo;s also not much fun! Poor alert quality leads to frustrated security teams that are not very happy and likely to leave.\nOur Solution Ryan McGeehan\u0026rsquo;s 2017 article \u0026ldquo;Lessons Learned in Detection Engineering\u0026rdquo; is one I keep coming back to - go read it if you haven\u0026rsquo;t! In Ryan\u0026rsquo;s words:\n\u0026ldquo;Great teams prepare the on-call analyst with as much information as possible.\u0026rdquo; \u0026hellip; \u0026ldquo;You should decorate alerts. This describes a standard of detail where an alert brings additional information to the analyst without requiring extra work. This helps avoids “tab hell” where an analyst needs to be logged into several tools to follow up on an incident, just to know what is going on.\u0026rdquo; \u0026hellip; \u0026ldquo;A rule should trigger automation that pulls in corresponding information, including log snippets, translation of IDs or employee names, hostnames, opinions from threat intelligence, etc.\u0026rdquo;\nThis is exactly what Squyre does for you. Automation runs to gather this information and add to your alert - \u0026ldquo;decorating\u0026rdquo; them.\nIt is cheap and relatively easy to run, improving your ability to catch threats, and keeping your team happy and focussed on what you pay them for! There are commercial products out there to do this, but they can get VERY expensive.\nThat\u0026rsquo;s the goal of the project - put good alert management into everyone\u0026rsquo;s reach, regardless of their company\u0026rsquo;s size or budget.\n","description":" Easy alert enrichment for overworked security teams!\nSquyre will help you deal with threats more effectively, decorating your security alerts by adding helpful information that provides context and helps you decide if this alert is cause for concern.\nThe Problem Once beyond the earliest stages of maturity, Security teams build processes to generate alerts to tell them when threats may be active in their environment. These alerts must be \u0026ldquo;triaged\u0026rdquo; by an analyst; as in, deciding which of the following applies.\n"},{"id":21,"href":"/squyre/tags/","title":"Tags","parent":"Squyre","content":"","description":""}]